<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
     
    <!--  开启二级缓存 -->
      <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>  
        <property name="mapperLocations" value="classpath*:com/xzg/mapper/**/*.xml"/>  
 </bean> 
    <!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
      	<!-- DAO接口所在包名，Spring会自动查找其下的类 --> 
        <property name="basePackage"  value="com.xzg.dao" /> 
     	  <!--  20170115增加，mybitis扫描接口包，用于实现方法--> 
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean> 
     <!-- Redis和缓存配置开始 -->  
             <!-- jedis 配置 -->  
             <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >  
                   <property name="maxIdle" value="100" /> 
                   <property name="maxWaitMillis" value="-1" />  
                   <property name="testOnBorrow" value="true" />  
             </bean >  
             <!-- redis连接池 -->
                 <bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="close">
                     <constructor-arg name="poolConfig" ref="poolConfig"/>
                     <constructor-arg name="host" value="192.168.106.128"/>
                     <constructor-arg name="port" value="6379"/>
                 </bean>

               <!-- redis服务器中心 -->  
           <bean id="connectionFactory"  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >  
                   <property name="poolConfig" ref="poolConfig" />  
                   <property name="port" value="6379" />  
                  <property name="hostName" value="192.168.106.128" />  
                   <!-- <property name="password" value="${redis.password}" /> --> 
                  <property name="timeout" value="10000" ></property>  
             </bean >  
             <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >  
                   <property name="connectionFactory" ref="connectionFactory" />  
                   <property name="keySerializer" >  
                      <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
                   </property>  
                   <property name="valueSerializer" >  
                       <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
                   </property>  
            </bean > 
    <import resource="applicationContext-ehcache.xml" />
</beans>